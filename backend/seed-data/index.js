const cloudinary = require('cloudinary').v2;
const mongoose = require('mongoose');
require('dotenv/config');
const modelSchemas = require('../models');

const cloudinaryUrl = process.env.CLOUDINARY_URL;
const dbURL = process.env.DATABASE_URL;

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_KEY,
  api_secret: process.env.CLOUDINARY_SECRET,
});

//---------------------------------------------------------------
const uploadImage = (imgSrc, folder) => {
  cloudinary.uploader
    .upload(imgSrc, {
      folder: `shp/${folder}/`,
    })
    .then(function (image) {
      console.log();
      console.log('** File Upload (Promise)');
      console.log(
        "* public_id for the uploaded image is generated by Cloudinary's service."
      );
      console.log('* ' + image.public_id);
      console.log('* ' + image.url);
      console.log('overall full info below');
      console.log(image);
      // getData();
      return image;
    })
    .catch(function (err) {
      console.log();
      console.log('** File Upload (Promise)');
      if (err) {
        console.warn(err);
      }
    });
};

//---------------------------------------------------------------
const getData = async () => {
  const conn = mongoose.createConnection(dbURL);
  const data = await conn
    .model('ProductImage', modelSchemas.productImageSchema)
    .find({})
    .exec();
  console.log(data);
  conn.close(() => {
    console.log('closing connection');
  });
};

const addToDb = async (data) => {
  const conn = mongoose.createConnection(dbURL);
  await conn
    .model('ProductImage', modelSchemas.productImageSchema)
    .create(data);

  conn.close(() => {
    console.log('closing connection');
  });
};

const mongo = async (mongo) => {
  try {
    const db = mongo.connection;
    db.on('error', console.error.bind(console, 'connection error:'));
    db.once('open', function () {
      // we're connected!

      console.log('Connected?');
    });

    // await Mongoose.model('ProductImage').create(params);
    // await Product.find({}).exec();
    // console.log(products);
    // return new Promise((resolve, reject) => {
    //   const ffs = mongo.model('Product').find({}).exec();
    //   console.log('REZOLVINA');
    //   console.log(ffs);
    //   resolve(ffs);
    // });
  } catch (err) {
    console.log(err);
  }
};

exports.uploadImage = uploadImage;
